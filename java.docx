Collection Framework



































Association is generalized concept of relations. It includes both Composition and Aggregation.
Composition(mixture) is a way to wrap simple objects or data types into a single unit. Compositions are a critical building block of many basic data structures
Aggregation(collection) differs from ordinary composition in that it does not imply ownership. In composition, when the owning object is destroyed, so are the contained objects. In aggregation, this is not necessarily true.
Both denotes relationship between object and only differ in their strength.
Trick to remember the difference : has A -Aggregation and Own - cOmpositoin

Now let observe the following image


Analogy:
Composition: The following picture is image composition i.e. using individual images making one image.

Aggregation : collection of image in single location

For example, A university owns various departments, and each department has a number of professors. If the university closes, the departments will no longer exist, but the professors in those departments will continue to exist. Therefore, a University can be seen as a composition of departments, whereas departments have an aggregation of professors. In addition, a Professor could work in more than one department, but a department could not be part of more than one university.









For two objects, Foo and Bar the relationships can be defined
Association - I have a relationship with an object. Foo uses Bar
public class Foo { 
    void Baz(Bar bar) {
    } 
};

Aggregation - I have an object which I've borrowed from someone else. When Foo dies, Bar may live on.
public class Foo { 
    private Bar bar; 
    Foo(Bar bar) { 
       this.bar = bar; 
    }
}

Composition - I own an object and I am responsible for its lifetime. When Foo dies, so does Bar
public class Foo {
    private Bar bar = new Bar(); 
}


